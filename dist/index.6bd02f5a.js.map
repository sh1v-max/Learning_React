{"mappings":"AAAA,qCAAqC;AACrC,uGAAuG;AACvG,MAAM,UAAU,MAAM,aAAa,CACjC,MACA;IAAE,IAAI,UAAU,0BAA0B;AAAG,GAC7C;AAIF,uBAAuB;AACvB,mDAAmD;AACnD,sDAAsD;AAEtD,gCAAgC;AAChC;;;;;;CAMC,GAED,MAAM,SAAS,MAAM,aAAa,CAChC,OACA;IAAE,IAAI;AAAS,GACf,MAAM,aAAa,CACjB,OACA;IAAE,IAAI;AAAQ,GACd,MAAM,aAAa,CAAC,MAAM,CAAC,GAAG;AAIlC,sBAAsB;AACtB,8EAA8E;AAC9E,+EAA+E;AAC/E,oCAAoC;AAEpC,6BAA6B;AAC7B,kBAAkB;AAClB,sEAAsE;AAEtE,0CAA0C;AAE1C,0BAA0B;AAE1B,MAAM,UAAU,MAAM,aAAa,CACjC,OACA;IAAE,IAAI;AAAS,GACf,MAAM,aAAa,CAAC,OAAO;IAAE,IAAI;AAAQ,GAAG;IAC1C,MAAM,aAAa,CAAC,MAAM,CAAC,GAAG;IAC9B,MAAM,aAAa,CAAC,MAAM,CAAC,GAAG;CAC/B;AAIH,uBAAuB;AAEvB,gBAAgB;AAChB,cAAc;AACd,MAAM,UAAU,MAAM,aAAa,CACjC,OACA;IAAE,IAAI;AAAS,GACf;IACE,MAAM,aAAa,CAAC,OAAO;QAAE,IAAI;IAAQ,GAAG;QAC1C,MAAM,aAAa,CAAC,MAAM,CAAC,GAAG;QAC9B,MAAM,aAAa,CAAC,MAAM,CAAC,GAAG;KAC/B;IACD,MAAM,aAAa,CAAC,OAAO;QAAE,IAAI;IAAS,GAAG;QAC3C,MAAM,aAAa,CAAC,MAAM,CAAC,GAAG;QAC9B,MAAM,aAAa,CAAC,MAAM,CAAC,GAAG;KAC/B;CACF;AAIH,gDAAgD;AAChD,uDAAuD;AACvD,iDAAiD;AAEjD,MAAM,OAAO,SAAS,UAAU,CAAC,SAAS,cAAc,CAAC;AACzD,0BAA0B;AAC1B,KAAK,MAAM,CAAC","sources":["App.js"],"sourcesContent":["//* how to create element using react\r\n// use React.createElement('tag name', { id: \"heading\"  here we give attributes}, 'content inside tag')\r\nconst heading = React.createElement(\r\n  'h1',\r\n  { id: 'heading' /* here we give attributes*/ },\r\n  'Hello world from React'\r\n)\r\n\r\n\r\n// root.render(heading)\r\n// console.log(heading) // it will return an object\r\n// this was the simple syntax to create only 1 element\r\n\r\n//* how to create nested element\r\n/**\r\n *<div class=\"parent\">\r\n *  <div class=\"child\">\r\n *    <h1>i'm h1 tag</h1>\r\n *  </div>\r\n *</div>\r\n */\r\n\r\nconst parent = React.createElement(\r\n  'div',\r\n  { id: 'parent' },\r\n  React.createElement(\r\n    'div',\r\n    { id: 'child' },\r\n    React.createElement('h1', {}, \"i'm an h1 tag\")\r\n  )\r\n)\r\n\r\n// root.render(parent)\r\n// calling root.render replaces the existing content inside the root container\r\n// since we are calling root.render(heading) first and then root.render(parent)\r\n// it overwrites the previous render\r\n\r\n//? parent is a react element\r\n// which is object\r\n// and then this react object becomes HTML that the browser understand\r\n\r\n// React.createElement doesn't create HTML\r\n\r\n//* how to create siblings\r\n\r\nconst parent2 = React.createElement(\r\n  'div',\r\n  { id: 'parent' },\r\n  React.createElement('div', { id: 'child' }, [\r\n    React.createElement('h1', {}, \"i'm an h1 tag\"),\r\n    React.createElement('h2', {}, \"i'm an h2 tag\"),\r\n  ])\r\n  // you wrap them inside an array\r\n)\r\n\r\n// root.render(parent2)\r\n\r\n// other example\r\n// using array\r\nconst parent3 = React.createElement(\r\n  'div',\r\n  { id: 'parent' },\r\n  [\r\n    React.createElement('div', { id: 'child' }, [\r\n      React.createElement('h1', {}, \"i'm an h1 tag\"),\r\n      React.createElement('h2', {}, \"i'm an h2 tag\"),\r\n    ]),\r\n    React.createElement('div', { id: 'child2' }, [\r\n      React.createElement('h1', {}, \"i'm an h1 tag\"),\r\n      React.createElement('h2', {}, \"i'm an h2 tag\"),\r\n    ]),\r\n  ]\r\n  // you wrap them inside an array\r\n)\r\n\r\n// it does make our code look hard to understand\r\n// that's why we use jsx, but this is the core of react\r\n// we will no longer be using React.createElement\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'))\r\n// root is ReactDOMRoot {}\r\nroot.render(parent3)"],"names":[],"version":3,"file":"index.6bd02f5a.js.map","sourceRoot":"/__parcel_source_root/"}